
// GRAPH ==========================================================
	var GraphCollection = Backbone.Collection.extend({ model: Graph });
	var Graph = WebBox.Graph = Backbone.Model.extend({
		idAttribute: "@id", // the URI attribute is '@id' in JSON-LD
		initialize: function(attributes, options) {
			u.assert(options.box, "no box provided");
			this.set({version: 0, objs:new ObjCollection()});
			this.box = options.box;
		},
		objs:function() { return this.get('objs'); },
		get_or_create:function(uri) {
			return this.objs().get(uri) || this.create(uri);
		},
		create: function(id){
			var model = new Obj({"@id":id}, {graph:this});
			this.objs().add(model);
			return model;
		},
		_update_graph : function(graph){
			var d = u.deferred(),
			graph_objs = graph.objs().map(function(obj){ return serialize_obj(obj);	}),
			box = graph.box;			
			graph.box.ajax("PUT",
						   box.id + "/update",
						   {
							   graph : escape(graph.id),
							   version: escape(graph.version),
							   data : JSON.stringify(graph_objs)
						   }).then(function(response) {
						graph.version = response.data["@version"];
						d.resolve(graph);
					}).fail(function(err) {	d.reject(err);});
			return d.promise();
		},
		_fetch : function(){
			var store = this.box.store, uri = this.id, d = u.deferred(), this_=this;
			// return a list of models (each of type WebBox.Object) to populate a GraphCollection
			this.box.ajax("GET", this.box.id, {"graph": uri})
				.then(function(data){
					var graph_collection = this_.objs();
					var version = 0;
					var objdata = data.data;					
					$.each(objdata, function(uri, obj){
						// top level keys
						if (uri === "@version") { version = obj; }
						if (uri[0] === "@") { return; } // ignore "@id" etc					
						// not one of those, so must be a
						// < uri > : { prop1 .. prop2 ... }
						var obj_model = this_.get_or_create(uri);
						$.each(obj, function(key, vals){
							var obj_vals = vals.map(function(val) {
								// it's an object, so return that
								if (val.hasOwnProperty("@id")) { return this_.get_or_create(val["@id"]); }
								// it's a non-object
								if (val.hasOwnProperty("@value")) {
									// if the string has no language or datatype, turn it just into a string
									if (val["@language"] === "" && val["@type"] === "") { return val["@value"];}
									// otherwise return the value as-is
									return val;
								}
								u.assert(false, "cannot unpack value ", val);
							});
							obj_model.set(key,obj_vals,{silent:true});
						});
						obj_model.change();
					});
					u.log(">>> setting graph version ", this_.id, " ", version);
					this_.version = version;
					d.resolve(this_);
				}).fail(function(err) { d.reject(err, this_);});
			return d.promise();
		},
		sync: function(method, model, options){
			switch(method){
			case "create": return u.warn('graph.create not implemented yet'); // TODO
			case "read": return model._fetch();
			case "update":return this._update_graph(model);
			case "delete": return u.warn('graph.delete not implemented yet'); // TODO
			}
		}
	});	
